var express = require("express");
var db = require("../db");
var passwordless = require("passwordless");
var https = require("https");

var router = express.Router();

// Returns the currently logged in user.
// Will return an empty response if the user is not currently logged in.
router.get("/currentUser", function(req, res) {
  res.send(res.locals.user);
});

// Changes your username and returns your new user object.
// Will send a 400 response if you already have the requested username.
// Will send a 403 response if you are not logged in.
// Will send a 500 response if this fails for any other reason.
// body - {newUsername: The desired username.}
router.post("/changeUsername",function(req, res) {
  if (res.locals.user == null) {
    res.status(403).send("You must be logged in to change your username");
    return;
  }
  if (res.locals.user.username == req.body.newUsername) {
    res.status(400).send("You already have \"" + req.body.newUsername + "\" as username.");
    return;
  }
  res.locals.user.changeUsername(req.body.newUsername, function(error, user) {
    if (error) {
      res.status(500).send(error.message);
    } else {
      res.send(user);
    }
  });
});

// Sends a login email to the specified address and returns a message describing the aciton.
// Will send a 400 response if the body is missing either "g-recaptcha-response" or "user".
// Will send a 403 response if the recaptcha verification fails.
// Will send a 500 response if this fails for any other reason.
// body - {
//     user: The email address of the user that wants to login.
//     g-recaptcha-response: The recaptcha token generated by the recaptcha widget.
// }
router.post("/sendToken", function(req, res) {
  var key = req.body["g-recaptcha-response"];
  if (key == null) {
    res.status(400).send("No ReCaptcha information received.");
    return;
  }
  if (req.body.user == null) {
    res.status(400).send("No email received.");
    return;
  }

  https.get(require("../config").recaptchaURL + key, onReCaptchaResponse);

  function onReCaptchaResponse(response) {
    var data = "";
    response.on("data", function(chunk) {
      data += chunk.toString();
    });
    response.on("end", function() {
      try {
        var recaptchaResult = JSON.parse(data);
        if (!recaptchaResult.success) {
          res.status(403).send("ReCAPTCHA verification failed.");
          return;
        } else {
          onReCaptchaSuccess();
        }
      } catch(error) {
        res.status(500).send("Unable to parse ReCAPTCHA results.");
        return;
      }
    });
  }

  function onReCaptchaSuccess() {
    passwordless.requestToken(getUserId)(req, res, onEmailSent);
  }

  function getUserId(email, delivery, callback, req) {
    db.User.getOrCreateWithEmail(email, function(error, user) {
      callback(error, user._id);
    });
  }

  function onEmailSent() {
    res.send("An email has been sent to " + req.body.user + "." );
  }
});

module.exports = router;

